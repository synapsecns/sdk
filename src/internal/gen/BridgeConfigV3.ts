/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace BridgeConfigV3 {
  export type PoolStruct = {
    tokenAddress: PromiseOrValue<string>;
    chainId: PromiseOrValue<BigNumberish>;
    poolAddress: PromiseOrValue<string>;
    metaswap: PromiseOrValue<boolean>;
  };

  export type PoolStructOutput = [string, BigNumber, string, boolean] & {
    tokenAddress: string;
    chainId: BigNumber;
    poolAddress: string;
    metaswap: boolean;
  };

  export type TokenStruct = {
    chainId: PromiseOrValue<BigNumberish>;
    tokenAddress: PromiseOrValue<string>;
    tokenDecimals: PromiseOrValue<BigNumberish>;
    maxSwap: PromiseOrValue<BigNumberish>;
    minSwap: PromiseOrValue<BigNumberish>;
    swapFee: PromiseOrValue<BigNumberish>;
    maxSwapFee: PromiseOrValue<BigNumberish>;
    minSwapFee: PromiseOrValue<BigNumberish>;
    hasUnderlying: PromiseOrValue<boolean>;
    isUnderlying: PromiseOrValue<boolean>;
  };

  export type TokenStructOutput = [
    BigNumber,
    string,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    boolean
  ] & {
    chainId: BigNumber;
    tokenAddress: string;
    tokenDecimals: number;
    maxSwap: BigNumber;
    minSwap: BigNumber;
    swapFee: BigNumber;
    maxSwapFee: BigNumber;
    minSwapFee: BigNumber;
    hasUnderlying: boolean;
    isUnderlying: boolean;
  };
}

export interface BridgeConfigV3Interface extends utils.Interface {
  functions: {
    "BRIDGEMANAGER_ROLE()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "bridgeConfigVersion()": FunctionFragment;
    "calculateSwapFee(string,uint256,uint256)": FunctionFragment;
    "calculateSwapFee(address,uint256,uint256)": FunctionFragment;
    "getAllTokenIDs()": FunctionFragment;
    "getMaxGasPrice(uint256)": FunctionFragment;
    "getPoolConfig(address,uint256)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMember(bytes32,uint256)": FunctionFragment;
    "getRoleMemberCount(bytes32)": FunctionFragment;
    "getToken(string,uint256)": FunctionFragment;
    "getTokenByAddress(string,uint256)": FunctionFragment;
    "getTokenByEVMAddress(address,uint256)": FunctionFragment;
    "getTokenByID(string,uint256)": FunctionFragment;
    "getTokenID(address,uint256)": FunctionFragment;
    "getTokenID(string,uint256)": FunctionFragment;
    "getUnderlyingToken(string)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "hasUnderlyingToken(string)": FunctionFragment;
    "isTokenIDExist(string)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setMaxGasPrice(uint256,uint256)": FunctionFragment;
    "setPoolConfig(address,uint256,address,bool)": FunctionFragment;
    "setTokenConfig(string,uint256,address,uint8,uint256,uint256,uint256,uint256,uint256,bool,bool)": FunctionFragment;
    "setTokenConfig(string,uint256,string,uint8,uint256,uint256,uint256,uint256,uint256,bool,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BRIDGEMANAGER_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "bridgeConfigVersion"
      | "calculateSwapFee(string,uint256,uint256)"
      | "calculateSwapFee(address,uint256,uint256)"
      | "getAllTokenIDs"
      | "getMaxGasPrice"
      | "getPoolConfig"
      | "getRoleAdmin"
      | "getRoleMember"
      | "getRoleMemberCount"
      | "getToken"
      | "getTokenByAddress"
      | "getTokenByEVMAddress"
      | "getTokenByID"
      | "getTokenID(address,uint256)"
      | "getTokenID(string,uint256)"
      | "getUnderlyingToken"
      | "grantRole"
      | "hasRole"
      | "hasUnderlyingToken"
      | "isTokenIDExist"
      | "renounceRole"
      | "revokeRole"
      | "setMaxGasPrice"
      | "setPoolConfig"
      | "setTokenConfig(string,uint256,address,uint8,uint256,uint256,uint256,uint256,uint256,bool,bool)"
      | "setTokenConfig(string,uint256,string,uint8,uint256,uint256,uint256,uint256,uint256,bool,bool)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "BRIDGEMANAGER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bridgeConfigVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateSwapFee(string,uint256,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateSwapFee(address,uint256,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllTokenIDs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxGasPrice",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolConfig",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getToken",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenByAddress",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenByEVMAddress",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenByID",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenID(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenID(string,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUnderlyingToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasUnderlyingToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isTokenIDExist",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxGasPrice",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolConfig",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenConfig(string,uint256,address,uint8,uint256,uint256,uint256,uint256,uint256,bool,bool)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenConfig(string,uint256,string,uint8,uint256,uint256,uint256,uint256,uint256,bool,bool)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "BRIDGEMANAGER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bridgeConfigVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateSwapFee(string,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateSwapFee(address,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllTokenIDs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxGasPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTokenByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenByEVMAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenByID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenID(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenID(string,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnderlyingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasUnderlyingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTokenIDExist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMaxGasPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenConfig(string,uint256,address,uint8,uint256,uint256,uint256,uint256,uint256,bool,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenConfig(string,uint256,string,uint8,uint256,uint256,uint256,uint256,uint256,bool,bool)",
    data: BytesLike
  ): Result;

  events: {
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
}

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface BridgeConfigV3 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BridgeConfigV3Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BRIDGEMANAGER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    bridgeConfigVersion(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * This means the fee should be calculated based on the chain that the nodes emit a tx on
     * Calculates bridge swap fee based on the destination chain's token transfer.
     * @param amount in native token decimals
     * @param chainID destination chain ID to query the token config for
     * @param tokenAddress address of the destination token to query token config for
     */
    "calculateSwapFee(string,uint256,uint256)"(
      tokenAddress: PromiseOrValue<string>,
      chainID: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * This means the fee should be calculated based on the chain that the nodes emit a tx on
     * Calculates bridge swap fee based on the destination chain's token transfer.
     * @param amount in native token decimals
     * @param chainID destination chain ID to query the token config for
     * @param tokenAddress address of the destination token to query token config for
     */
    "calculateSwapFee(address,uint256,uint256)"(
      tokenAddress: PromiseOrValue<string>,
      chainID: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * Returns a list of all existing token IDs converted to strings
     */
    getAllTokenIDs(
      overrides?: CallOverrides
    ): Promise<[string[]] & { result: string[] }>;

    /**
     * gets the max gas price for a chain
     */
    getMaxGasPrice(
      chainID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPoolConfig(
      tokenAddress: PromiseOrValue<string>,
      chainID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BridgeConfigV3.PoolStructOutput]>;

    /**
     * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
     */
    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    /**
     * Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.
     */
    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    /**
     * Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.
     */
    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * Returns the full token config struct
     * @param chainID Chain ID of which token address + config to get
     * @param tokenID String input of the token ID for the token
     */
    getToken(
      tokenID: PromiseOrValue<string>,
      chainID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BridgeConfigV3.TokenStructOutput] & {
        token: BridgeConfigV3.TokenStructOutput;
      }
    >;

    /**
     * Returns token config struct, given an address and chainID
     * @param chainID Chain ID of which token to get config for
     * @param tokenAddress Matches the token ID by using a combo of address + chain ID
     */
    getTokenByAddress(
      tokenAddress: PromiseOrValue<string>,
      chainID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BridgeConfigV3.TokenStructOutput] & {
        token: BridgeConfigV3.TokenStructOutput;
      }
    >;

    getTokenByEVMAddress(
      tokenAddress: PromiseOrValue<string>,
      chainID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BridgeConfigV3.TokenStructOutput] & {
        token: BridgeConfigV3.TokenStructOutput;
      }
    >;

    /**
     * Returns the full token config struct
     * @param chainID Chain ID of which token address + config to get
     * @param tokenID String input of the token ID for the token
     */
    getTokenByID(
      tokenID: PromiseOrValue<string>,
      chainID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BridgeConfigV3.TokenStructOutput] & {
        token: BridgeConfigV3.TokenStructOutput;
      }
    >;

    /**
     * Returns the token ID (string) of the cross-chain token inputted
     * @param chainID chainID of which to get token ID for
     * @param tokenAddress address of token to get ID for
     */
    "getTokenID(address,uint256)"(
      tokenAddress: PromiseOrValue<string>,
      chainID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getTokenID(string,uint256)"(
      tokenAddress: PromiseOrValue<string>,
      chainID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    /**
     * Returns which token is the underlying token to withdraw
     * @param tokenID string token ID
     */
    getUnderlyingToken(
      tokenID: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BridgeConfigV3.TokenStructOutput] & {
        token: BridgeConfigV3.TokenStructOutput;
      }
    >;

    /**
     * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.
     */
    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Returns `true` if `account` has been granted `role`.
     */
    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * Returns true if the token has an underlying token -- meaning the token is deposited into the bridge
     * @param tokenID String to check if it is a withdraw/underlying token
     */
    hasUnderlyingToken(
      tokenID: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * Public function returning if token ID exists given a string
     */
    isTokenIDExist(
      tokenID: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.
     */
    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.
     */
    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * sets the max gas price for a chain
     */
    setMaxGasPrice(
      chainID: PromiseOrValue<BigNumberish>,
      maxPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPoolConfig(
      tokenAddress: PromiseOrValue<string>,
      chainID: PromiseOrValue<BigNumberish>,
      poolAddress: PromiseOrValue<string>,
      metaswap: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Main write function of this contract - Handles creating the struct and passing it to the internal logic function
     * @param chainID chain ID to use for the token config object
     * @param hasUnderlying bool which represents whether this is a global mint token or one to withdraw()
     * @param isUnderlying bool which represents if this token is the one to withdraw on the given chain
     * @param maxSwap maximum amount of token allowed to be transferred at once - in native token decimals
     * @param maxSwapFee max swap fee to be charged - in native token decimals
     * @param minSwap minimum amount of token needed to be transferred at once - in native token decimals
     * @param minSwapFee min swap fee to be charged - in native token decimals - especially useful for mainnet ETH
     * @param swapFee percent based swap fee -- 10e6 == 10bps
     * @param tokenAddress token address of the token on the given chain
     * @param tokenDecimals decimals of token
     * @param tokenID string ID to set the token config object form
     */
    "setTokenConfig(string,uint256,address,uint8,uint256,uint256,uint256,uint256,uint256,bool,bool)"(
      tokenID: PromiseOrValue<string>,
      chainID: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      tokenDecimals: PromiseOrValue<BigNumberish>,
      maxSwap: PromiseOrValue<BigNumberish>,
      minSwap: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      maxSwapFee: PromiseOrValue<BigNumberish>,
      minSwapFee: PromiseOrValue<BigNumberish>,
      hasUnderlying: PromiseOrValue<boolean>,
      isUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Main write function of this contract - Handles creating the struct and passing it to the internal logic function
     * @param chainID chain ID to use for the token config object
     * @param hasUnderlying bool which represents whether this is a global mint token or one to withdraw()
     * @param isUnderlying bool which represents if this token is the one to withdraw on the given chain
     * @param maxSwap maximum amount of token allowed to be transferred at once - in native token decimals
     * @param maxSwapFee max swap fee to be charged - in native token decimals
     * @param minSwap minimum amount of token needed to be transferred at once - in native token decimals
     * @param minSwapFee min swap fee to be charged - in native token decimals - especially useful for mainnet ETH
     * @param swapFee percent based swap fee -- 10e6 == 10bps
     * @param tokenAddress token address of the token on the given chain
     * @param tokenDecimals decimals of token
     * @param tokenID string ID to set the token config object form
     */
    "setTokenConfig(string,uint256,string,uint8,uint256,uint256,uint256,uint256,uint256,bool,bool)"(
      tokenID: PromiseOrValue<string>,
      chainID: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      tokenDecimals: PromiseOrValue<BigNumberish>,
      maxSwap: PromiseOrValue<BigNumberish>,
      minSwap: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      maxSwapFee: PromiseOrValue<BigNumberish>,
      minSwapFee: PromiseOrValue<BigNumberish>,
      hasUnderlying: PromiseOrValue<boolean>,
      isUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  BRIDGEMANAGER_ROLE(overrides?: CallOverrides): Promise<string>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  bridgeConfigVersion(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * This means the fee should be calculated based on the chain that the nodes emit a tx on
   * Calculates bridge swap fee based on the destination chain's token transfer.
   * @param amount in native token decimals
   * @param chainID destination chain ID to query the token config for
   * @param tokenAddress address of the destination token to query token config for
   */
  "calculateSwapFee(string,uint256,uint256)"(
    tokenAddress: PromiseOrValue<string>,
    chainID: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * This means the fee should be calculated based on the chain that the nodes emit a tx on
   * Calculates bridge swap fee based on the destination chain's token transfer.
   * @param amount in native token decimals
   * @param chainID destination chain ID to query the token config for
   * @param tokenAddress address of the destination token to query token config for
   */
  "calculateSwapFee(address,uint256,uint256)"(
    tokenAddress: PromiseOrValue<string>,
    chainID: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Returns a list of all existing token IDs converted to strings
   */
  getAllTokenIDs(overrides?: CallOverrides): Promise<string[]>;

  /**
   * gets the max gas price for a chain
   */
  getMaxGasPrice(
    chainID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPoolConfig(
    tokenAddress: PromiseOrValue<string>,
    chainID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BridgeConfigV3.PoolStructOutput>;

  /**
   * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
   */
  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  /**
   * Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.
   */
  getRoleMember(
    role: PromiseOrValue<BytesLike>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  /**
   * Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.
   */
  getRoleMemberCount(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Returns the full token config struct
   * @param chainID Chain ID of which token address + config to get
   * @param tokenID String input of the token ID for the token
   */
  getToken(
    tokenID: PromiseOrValue<string>,
    chainID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BridgeConfigV3.TokenStructOutput>;

  /**
   * Returns token config struct, given an address and chainID
   * @param chainID Chain ID of which token to get config for
   * @param tokenAddress Matches the token ID by using a combo of address + chain ID
   */
  getTokenByAddress(
    tokenAddress: PromiseOrValue<string>,
    chainID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BridgeConfigV3.TokenStructOutput>;

  getTokenByEVMAddress(
    tokenAddress: PromiseOrValue<string>,
    chainID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BridgeConfigV3.TokenStructOutput>;

  /**
   * Returns the full token config struct
   * @param chainID Chain ID of which token address + config to get
   * @param tokenID String input of the token ID for the token
   */
  getTokenByID(
    tokenID: PromiseOrValue<string>,
    chainID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BridgeConfigV3.TokenStructOutput>;

  /**
   * Returns the token ID (string) of the cross-chain token inputted
   * @param chainID chainID of which to get token ID for
   * @param tokenAddress address of token to get ID for
   */
  "getTokenID(address,uint256)"(
    tokenAddress: PromiseOrValue<string>,
    chainID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  "getTokenID(string,uint256)"(
    tokenAddress: PromiseOrValue<string>,
    chainID: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  /**
   * Returns which token is the underlying token to withdraw
   * @param tokenID string token ID
   */
  getUnderlyingToken(
    tokenID: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BridgeConfigV3.TokenStructOutput>;

  /**
   * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.
   */
  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Returns `true` if `account` has been granted `role`.
   */
  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * Returns true if the token has an underlying token -- meaning the token is deposited into the bridge
   * @param tokenID String to check if it is a withdraw/underlying token
   */
  hasUnderlyingToken(
    tokenID: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * Public function returning if token ID exists given a string
   */
  isTokenIDExist(
    tokenID: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.
   */
  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.
   */
  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * sets the max gas price for a chain
   */
  setMaxGasPrice(
    chainID: PromiseOrValue<BigNumberish>,
    maxPrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPoolConfig(
    tokenAddress: PromiseOrValue<string>,
    chainID: PromiseOrValue<BigNumberish>,
    poolAddress: PromiseOrValue<string>,
    metaswap: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Main write function of this contract - Handles creating the struct and passing it to the internal logic function
   * @param chainID chain ID to use for the token config object
   * @param hasUnderlying bool which represents whether this is a global mint token or one to withdraw()
   * @param isUnderlying bool which represents if this token is the one to withdraw on the given chain
   * @param maxSwap maximum amount of token allowed to be transferred at once - in native token decimals
   * @param maxSwapFee max swap fee to be charged - in native token decimals
   * @param minSwap minimum amount of token needed to be transferred at once - in native token decimals
   * @param minSwapFee min swap fee to be charged - in native token decimals - especially useful for mainnet ETH
   * @param swapFee percent based swap fee -- 10e6 == 10bps
   * @param tokenAddress token address of the token on the given chain
   * @param tokenDecimals decimals of token
   * @param tokenID string ID to set the token config object form
   */
  "setTokenConfig(string,uint256,address,uint8,uint256,uint256,uint256,uint256,uint256,bool,bool)"(
    tokenID: PromiseOrValue<string>,
    chainID: PromiseOrValue<BigNumberish>,
    tokenAddress: PromiseOrValue<string>,
    tokenDecimals: PromiseOrValue<BigNumberish>,
    maxSwap: PromiseOrValue<BigNumberish>,
    minSwap: PromiseOrValue<BigNumberish>,
    swapFee: PromiseOrValue<BigNumberish>,
    maxSwapFee: PromiseOrValue<BigNumberish>,
    minSwapFee: PromiseOrValue<BigNumberish>,
    hasUnderlying: PromiseOrValue<boolean>,
    isUnderlying: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Main write function of this contract - Handles creating the struct and passing it to the internal logic function
   * @param chainID chain ID to use for the token config object
   * @param hasUnderlying bool which represents whether this is a global mint token or one to withdraw()
   * @param isUnderlying bool which represents if this token is the one to withdraw on the given chain
   * @param maxSwap maximum amount of token allowed to be transferred at once - in native token decimals
   * @param maxSwapFee max swap fee to be charged - in native token decimals
   * @param minSwap minimum amount of token needed to be transferred at once - in native token decimals
   * @param minSwapFee min swap fee to be charged - in native token decimals - especially useful for mainnet ETH
   * @param swapFee percent based swap fee -- 10e6 == 10bps
   * @param tokenAddress token address of the token on the given chain
   * @param tokenDecimals decimals of token
   * @param tokenID string ID to set the token config object form
   */
  "setTokenConfig(string,uint256,string,uint8,uint256,uint256,uint256,uint256,uint256,bool,bool)"(
    tokenID: PromiseOrValue<string>,
    chainID: PromiseOrValue<BigNumberish>,
    tokenAddress: PromiseOrValue<string>,
    tokenDecimals: PromiseOrValue<BigNumberish>,
    maxSwap: PromiseOrValue<BigNumberish>,
    minSwap: PromiseOrValue<BigNumberish>,
    swapFee: PromiseOrValue<BigNumberish>,
    maxSwapFee: PromiseOrValue<BigNumberish>,
    minSwapFee: PromiseOrValue<BigNumberish>,
    hasUnderlying: PromiseOrValue<boolean>,
    isUnderlying: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    BRIDGEMANAGER_ROLE(overrides?: CallOverrides): Promise<string>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    bridgeConfigVersion(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * This means the fee should be calculated based on the chain that the nodes emit a tx on
     * Calculates bridge swap fee based on the destination chain's token transfer.
     * @param amount in native token decimals
     * @param chainID destination chain ID to query the token config for
     * @param tokenAddress address of the destination token to query token config for
     */
    "calculateSwapFee(string,uint256,uint256)"(
      tokenAddress: PromiseOrValue<string>,
      chainID: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * This means the fee should be calculated based on the chain that the nodes emit a tx on
     * Calculates bridge swap fee based on the destination chain's token transfer.
     * @param amount in native token decimals
     * @param chainID destination chain ID to query the token config for
     * @param tokenAddress address of the destination token to query token config for
     */
    "calculateSwapFee(address,uint256,uint256)"(
      tokenAddress: PromiseOrValue<string>,
      chainID: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns a list of all existing token IDs converted to strings
     */
    getAllTokenIDs(overrides?: CallOverrides): Promise<string[]>;

    /**
     * gets the max gas price for a chain
     */
    getMaxGasPrice(
      chainID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolConfig(
      tokenAddress: PromiseOrValue<string>,
      chainID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BridgeConfigV3.PoolStructOutput>;

    /**
     * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
     */
    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.
     */
    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.
     */
    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the full token config struct
     * @param chainID Chain ID of which token address + config to get
     * @param tokenID String input of the token ID for the token
     */
    getToken(
      tokenID: PromiseOrValue<string>,
      chainID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BridgeConfigV3.TokenStructOutput>;

    /**
     * Returns token config struct, given an address and chainID
     * @param chainID Chain ID of which token to get config for
     * @param tokenAddress Matches the token ID by using a combo of address + chain ID
     */
    getTokenByAddress(
      tokenAddress: PromiseOrValue<string>,
      chainID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BridgeConfigV3.TokenStructOutput>;

    getTokenByEVMAddress(
      tokenAddress: PromiseOrValue<string>,
      chainID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BridgeConfigV3.TokenStructOutput>;

    /**
     * Returns the full token config struct
     * @param chainID Chain ID of which token address + config to get
     * @param tokenID String input of the token ID for the token
     */
    getTokenByID(
      tokenID: PromiseOrValue<string>,
      chainID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BridgeConfigV3.TokenStructOutput>;

    /**
     * Returns the token ID (string) of the cross-chain token inputted
     * @param chainID chainID of which to get token ID for
     * @param tokenAddress address of token to get ID for
     */
    "getTokenID(address,uint256)"(
      tokenAddress: PromiseOrValue<string>,
      chainID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    "getTokenID(string,uint256)"(
      tokenAddress: PromiseOrValue<string>,
      chainID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Returns which token is the underlying token to withdraw
     * @param tokenID string token ID
     */
    getUnderlyingToken(
      tokenID: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BridgeConfigV3.TokenStructOutput>;

    /**
     * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.
     */
    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Returns `true` if `account` has been granted `role`.
     */
    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Returns true if the token has an underlying token -- meaning the token is deposited into the bridge
     * @param tokenID String to check if it is a withdraw/underlying token
     */
    hasUnderlyingToken(
      tokenID: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Public function returning if token ID exists given a string
     */
    isTokenIDExist(
      tokenID: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.
     */
    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.
     */
    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * sets the max gas price for a chain
     */
    setMaxGasPrice(
      chainID: PromiseOrValue<BigNumberish>,
      maxPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPoolConfig(
      tokenAddress: PromiseOrValue<string>,
      chainID: PromiseOrValue<BigNumberish>,
      poolAddress: PromiseOrValue<string>,
      metaswap: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BridgeConfigV3.PoolStructOutput>;

    /**
     * Main write function of this contract - Handles creating the struct and passing it to the internal logic function
     * @param chainID chain ID to use for the token config object
     * @param hasUnderlying bool which represents whether this is a global mint token or one to withdraw()
     * @param isUnderlying bool which represents if this token is the one to withdraw on the given chain
     * @param maxSwap maximum amount of token allowed to be transferred at once - in native token decimals
     * @param maxSwapFee max swap fee to be charged - in native token decimals
     * @param minSwap minimum amount of token needed to be transferred at once - in native token decimals
     * @param minSwapFee min swap fee to be charged - in native token decimals - especially useful for mainnet ETH
     * @param swapFee percent based swap fee -- 10e6 == 10bps
     * @param tokenAddress token address of the token on the given chain
     * @param tokenDecimals decimals of token
     * @param tokenID string ID to set the token config object form
     */
    "setTokenConfig(string,uint256,address,uint8,uint256,uint256,uint256,uint256,uint256,bool,bool)"(
      tokenID: PromiseOrValue<string>,
      chainID: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      tokenDecimals: PromiseOrValue<BigNumberish>,
      maxSwap: PromiseOrValue<BigNumberish>,
      minSwap: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      maxSwapFee: PromiseOrValue<BigNumberish>,
      minSwapFee: PromiseOrValue<BigNumberish>,
      hasUnderlying: PromiseOrValue<boolean>,
      isUnderlying: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Main write function of this contract - Handles creating the struct and passing it to the internal logic function
     * @param chainID chain ID to use for the token config object
     * @param hasUnderlying bool which represents whether this is a global mint token or one to withdraw()
     * @param isUnderlying bool which represents if this token is the one to withdraw on the given chain
     * @param maxSwap maximum amount of token allowed to be transferred at once - in native token decimals
     * @param maxSwapFee max swap fee to be charged - in native token decimals
     * @param minSwap minimum amount of token needed to be transferred at once - in native token decimals
     * @param minSwapFee min swap fee to be charged - in native token decimals - especially useful for mainnet ETH
     * @param swapFee percent based swap fee -- 10e6 == 10bps
     * @param tokenAddress token address of the token on the given chain
     * @param tokenDecimals decimals of token
     * @param tokenID string ID to set the token config object form
     */
    "setTokenConfig(string,uint256,string,uint8,uint256,uint256,uint256,uint256,uint256,bool,bool)"(
      tokenID: PromiseOrValue<string>,
      chainID: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      tokenDecimals: PromiseOrValue<BigNumberish>,
      maxSwap: PromiseOrValue<BigNumberish>,
      minSwap: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      maxSwapFee: PromiseOrValue<BigNumberish>,
      minSwapFee: PromiseOrValue<BigNumberish>,
      hasUnderlying: PromiseOrValue<boolean>,
      isUnderlying: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
  };

  estimateGas: {
    BRIDGEMANAGER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    bridgeConfigVersion(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * This means the fee should be calculated based on the chain that the nodes emit a tx on
     * Calculates bridge swap fee based on the destination chain's token transfer.
     * @param amount in native token decimals
     * @param chainID destination chain ID to query the token config for
     * @param tokenAddress address of the destination token to query token config for
     */
    "calculateSwapFee(string,uint256,uint256)"(
      tokenAddress: PromiseOrValue<string>,
      chainID: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * This means the fee should be calculated based on the chain that the nodes emit a tx on
     * Calculates bridge swap fee based on the destination chain's token transfer.
     * @param amount in native token decimals
     * @param chainID destination chain ID to query the token config for
     * @param tokenAddress address of the destination token to query token config for
     */
    "calculateSwapFee(address,uint256,uint256)"(
      tokenAddress: PromiseOrValue<string>,
      chainID: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns a list of all existing token IDs converted to strings
     */
    getAllTokenIDs(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * gets the max gas price for a chain
     */
    getMaxGasPrice(
      chainID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolConfig(
      tokenAddress: PromiseOrValue<string>,
      chainID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
     */
    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.
     */
    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.
     */
    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the full token config struct
     * @param chainID Chain ID of which token address + config to get
     * @param tokenID String input of the token ID for the token
     */
    getToken(
      tokenID: PromiseOrValue<string>,
      chainID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns token config struct, given an address and chainID
     * @param chainID Chain ID of which token to get config for
     * @param tokenAddress Matches the token ID by using a combo of address + chain ID
     */
    getTokenByAddress(
      tokenAddress: PromiseOrValue<string>,
      chainID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenByEVMAddress(
      tokenAddress: PromiseOrValue<string>,
      chainID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the full token config struct
     * @param chainID Chain ID of which token address + config to get
     * @param tokenID String input of the token ID for the token
     */
    getTokenByID(
      tokenID: PromiseOrValue<string>,
      chainID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the token ID (string) of the cross-chain token inputted
     * @param chainID chainID of which to get token ID for
     * @param tokenAddress address of token to get ID for
     */
    "getTokenID(address,uint256)"(
      tokenAddress: PromiseOrValue<string>,
      chainID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getTokenID(string,uint256)"(
      tokenAddress: PromiseOrValue<string>,
      chainID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns which token is the underlying token to withdraw
     * @param tokenID string token ID
     */
    getUnderlyingToken(
      tokenID: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.
     */
    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Returns `true` if `account` has been granted `role`.
     */
    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns true if the token has an underlying token -- meaning the token is deposited into the bridge
     * @param tokenID String to check if it is a withdraw/underlying token
     */
    hasUnderlyingToken(
      tokenID: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Public function returning if token ID exists given a string
     */
    isTokenIDExist(
      tokenID: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.
     */
    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.
     */
    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * sets the max gas price for a chain
     */
    setMaxGasPrice(
      chainID: PromiseOrValue<BigNumberish>,
      maxPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPoolConfig(
      tokenAddress: PromiseOrValue<string>,
      chainID: PromiseOrValue<BigNumberish>,
      poolAddress: PromiseOrValue<string>,
      metaswap: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Main write function of this contract - Handles creating the struct and passing it to the internal logic function
     * @param chainID chain ID to use for the token config object
     * @param hasUnderlying bool which represents whether this is a global mint token or one to withdraw()
     * @param isUnderlying bool which represents if this token is the one to withdraw on the given chain
     * @param maxSwap maximum amount of token allowed to be transferred at once - in native token decimals
     * @param maxSwapFee max swap fee to be charged - in native token decimals
     * @param minSwap minimum amount of token needed to be transferred at once - in native token decimals
     * @param minSwapFee min swap fee to be charged - in native token decimals - especially useful for mainnet ETH
     * @param swapFee percent based swap fee -- 10e6 == 10bps
     * @param tokenAddress token address of the token on the given chain
     * @param tokenDecimals decimals of token
     * @param tokenID string ID to set the token config object form
     */
    "setTokenConfig(string,uint256,address,uint8,uint256,uint256,uint256,uint256,uint256,bool,bool)"(
      tokenID: PromiseOrValue<string>,
      chainID: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      tokenDecimals: PromiseOrValue<BigNumberish>,
      maxSwap: PromiseOrValue<BigNumberish>,
      minSwap: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      maxSwapFee: PromiseOrValue<BigNumberish>,
      minSwapFee: PromiseOrValue<BigNumberish>,
      hasUnderlying: PromiseOrValue<boolean>,
      isUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Main write function of this contract - Handles creating the struct and passing it to the internal logic function
     * @param chainID chain ID to use for the token config object
     * @param hasUnderlying bool which represents whether this is a global mint token or one to withdraw()
     * @param isUnderlying bool which represents if this token is the one to withdraw on the given chain
     * @param maxSwap maximum amount of token allowed to be transferred at once - in native token decimals
     * @param maxSwapFee max swap fee to be charged - in native token decimals
     * @param minSwap minimum amount of token needed to be transferred at once - in native token decimals
     * @param minSwapFee min swap fee to be charged - in native token decimals - especially useful for mainnet ETH
     * @param swapFee percent based swap fee -- 10e6 == 10bps
     * @param tokenAddress token address of the token on the given chain
     * @param tokenDecimals decimals of token
     * @param tokenID string ID to set the token config object form
     */
    "setTokenConfig(string,uint256,string,uint8,uint256,uint256,uint256,uint256,uint256,bool,bool)"(
      tokenID: PromiseOrValue<string>,
      chainID: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      tokenDecimals: PromiseOrValue<BigNumberish>,
      maxSwap: PromiseOrValue<BigNumberish>,
      minSwap: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      maxSwapFee: PromiseOrValue<BigNumberish>,
      minSwapFee: PromiseOrValue<BigNumberish>,
      hasUnderlying: PromiseOrValue<boolean>,
      isUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BRIDGEMANAGER_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bridgeConfigVersion(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * This means the fee should be calculated based on the chain that the nodes emit a tx on
     * Calculates bridge swap fee based on the destination chain's token transfer.
     * @param amount in native token decimals
     * @param chainID destination chain ID to query the token config for
     * @param tokenAddress address of the destination token to query token config for
     */
    "calculateSwapFee(string,uint256,uint256)"(
      tokenAddress: PromiseOrValue<string>,
      chainID: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * This means the fee should be calculated based on the chain that the nodes emit a tx on
     * Calculates bridge swap fee based on the destination chain's token transfer.
     * @param amount in native token decimals
     * @param chainID destination chain ID to query the token config for
     * @param tokenAddress address of the destination token to query token config for
     */
    "calculateSwapFee(address,uint256,uint256)"(
      tokenAddress: PromiseOrValue<string>,
      chainID: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns a list of all existing token IDs converted to strings
     */
    getAllTokenIDs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * gets the max gas price for a chain
     */
    getMaxGasPrice(
      chainID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolConfig(
      tokenAddress: PromiseOrValue<string>,
      chainID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
     */
    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.
     */
    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.
     */
    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the full token config struct
     * @param chainID Chain ID of which token address + config to get
     * @param tokenID String input of the token ID for the token
     */
    getToken(
      tokenID: PromiseOrValue<string>,
      chainID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns token config struct, given an address and chainID
     * @param chainID Chain ID of which token to get config for
     * @param tokenAddress Matches the token ID by using a combo of address + chain ID
     */
    getTokenByAddress(
      tokenAddress: PromiseOrValue<string>,
      chainID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenByEVMAddress(
      tokenAddress: PromiseOrValue<string>,
      chainID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the full token config struct
     * @param chainID Chain ID of which token address + config to get
     * @param tokenID String input of the token ID for the token
     */
    getTokenByID(
      tokenID: PromiseOrValue<string>,
      chainID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the token ID (string) of the cross-chain token inputted
     * @param chainID chainID of which to get token ID for
     * @param tokenAddress address of token to get ID for
     */
    "getTokenID(address,uint256)"(
      tokenAddress: PromiseOrValue<string>,
      chainID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTokenID(string,uint256)"(
      tokenAddress: PromiseOrValue<string>,
      chainID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns which token is the underlying token to withdraw
     * @param tokenID string token ID
     */
    getUnderlyingToken(
      tokenID: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.
     */
    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Returns `true` if `account` has been granted `role`.
     */
    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns true if the token has an underlying token -- meaning the token is deposited into the bridge
     * @param tokenID String to check if it is a withdraw/underlying token
     */
    hasUnderlyingToken(
      tokenID: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Public function returning if token ID exists given a string
     */
    isTokenIDExist(
      tokenID: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.
     */
    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.
     */
    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * sets the max gas price for a chain
     */
    setMaxGasPrice(
      chainID: PromiseOrValue<BigNumberish>,
      maxPrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPoolConfig(
      tokenAddress: PromiseOrValue<string>,
      chainID: PromiseOrValue<BigNumberish>,
      poolAddress: PromiseOrValue<string>,
      metaswap: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Main write function of this contract - Handles creating the struct and passing it to the internal logic function
     * @param chainID chain ID to use for the token config object
     * @param hasUnderlying bool which represents whether this is a global mint token or one to withdraw()
     * @param isUnderlying bool which represents if this token is the one to withdraw on the given chain
     * @param maxSwap maximum amount of token allowed to be transferred at once - in native token decimals
     * @param maxSwapFee max swap fee to be charged - in native token decimals
     * @param minSwap minimum amount of token needed to be transferred at once - in native token decimals
     * @param minSwapFee min swap fee to be charged - in native token decimals - especially useful for mainnet ETH
     * @param swapFee percent based swap fee -- 10e6 == 10bps
     * @param tokenAddress token address of the token on the given chain
     * @param tokenDecimals decimals of token
     * @param tokenID string ID to set the token config object form
     */
    "setTokenConfig(string,uint256,address,uint8,uint256,uint256,uint256,uint256,uint256,bool,bool)"(
      tokenID: PromiseOrValue<string>,
      chainID: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      tokenDecimals: PromiseOrValue<BigNumberish>,
      maxSwap: PromiseOrValue<BigNumberish>,
      minSwap: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      maxSwapFee: PromiseOrValue<BigNumberish>,
      minSwapFee: PromiseOrValue<BigNumberish>,
      hasUnderlying: PromiseOrValue<boolean>,
      isUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Main write function of this contract - Handles creating the struct and passing it to the internal logic function
     * @param chainID chain ID to use for the token config object
     * @param hasUnderlying bool which represents whether this is a global mint token or one to withdraw()
     * @param isUnderlying bool which represents if this token is the one to withdraw on the given chain
     * @param maxSwap maximum amount of token allowed to be transferred at once - in native token decimals
     * @param maxSwapFee max swap fee to be charged - in native token decimals
     * @param minSwap minimum amount of token needed to be transferred at once - in native token decimals
     * @param minSwapFee min swap fee to be charged - in native token decimals - especially useful for mainnet ETH
     * @param swapFee percent based swap fee -- 10e6 == 10bps
     * @param tokenAddress token address of the token on the given chain
     * @param tokenDecimals decimals of token
     * @param tokenID string ID to set the token config object form
     */
    "setTokenConfig(string,uint256,string,uint8,uint256,uint256,uint256,uint256,uint256,bool,bool)"(
      tokenID: PromiseOrValue<string>,
      chainID: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      tokenDecimals: PromiseOrValue<BigNumberish>,
      maxSwap: PromiseOrValue<BigNumberish>,
      minSwap: PromiseOrValue<BigNumberish>,
      swapFee: PromiseOrValue<BigNumberish>,
      maxSwapFee: PromiseOrValue<BigNumberish>,
      minSwapFee: PromiseOrValue<BigNumberish>,
      hasUnderlying: PromiseOrValue<boolean>,
      isUnderlying: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
